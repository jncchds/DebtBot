// <auto-generated />
using System;
using DebtBot.DB;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace DebtBot.DB.Migrations
{
    [DbContext(typeof(DebtContext))]
    [Migration("20240129144827_BillLineParticipant_KeyFix")]
    partial class BillLineParticipant_KeyFix
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("DebtBot.DB.Entities.Bill", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CurrencyCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Bills");
                });

            modelBuilder.Entity("DebtBot.DB.Entities.BillLine", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("BillId")
                        .HasColumnType("uuid");

                    b.Property<string>("ItemDescription")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("Subtotal")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("BillId");

                    b.ToTable("BillLines");
                });

            modelBuilder.Entity("DebtBot.DB.Entities.BillLineParticipant", b =>
                {
                    b.Property<Guid>("BillLineId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("Part")
                        .HasColumnType("decimal(10, 4)");

                    b.HasKey("BillLineId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("BillLineParticipants");
                });

            modelBuilder.Entity("DebtBot.DB.Entities.BillPayment", b =>
                {
                    b.Property<Guid>("BillId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(10, 4)");

                    b.HasKey("BillId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("BillPayments");
                });

            modelBuilder.Entity("DebtBot.DB.Entities.Currency", b =>
                {
                    b.Property<string>("CurrencyCode")
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)");

                    b.Property<char>("Character")
                        .HasColumnType("character(1)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("CurrencyCode");

                    b.ToTable("Currencies");
                });

            modelBuilder.Entity("DebtBot.DB.Entities.Debt", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(10, 4)");

                    b.Property<Guid>("CreditorUserId")
                        .HasColumnType("uuid");

                    b.Property<string>("CurrencyCode")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)");

                    b.Property<Guid>("DebtorUserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CreditorUserId");

                    b.HasIndex("DebtorUserId");

                    b.ToTable("Debts");
                });

            modelBuilder.Entity("DebtBot.DB.Entities.Event", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Parameter")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("DebtBot.DB.Entities.LedgerRecord", b =>
                {
                    b.Property<Guid>("CreditorUserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("DebtorUserId")
                        .HasColumnType("uuid");

                    b.Property<string>("Currency")
                        .HasColumnType("text");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(10, 4)");

                    b.Property<Guid>("BillId")
                        .HasColumnType("uuid");

                    b.HasKey("CreditorUserId", "DebtorUserId", "Currency");

                    b.HasIndex("BillId");

                    b.HasIndex("DebtorUserId");

                    b.ToTable("Ledgers");
                });

            modelBuilder.Entity("DebtBot.DB.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("Phone")
                        .HasColumnType("text");

                    b.Property<long?>("TelegramId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("DebtBot.DB.Entities.UserContactLink", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ContactUserId")
                        .HasColumnType("uuid");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("UserId", "ContactUserId");

                    b.HasIndex("ContactUserId");

                    b.ToTable("UserContactsLinks");
                });

            modelBuilder.Entity("DebtBot.DB.Entities.BillLine", b =>
                {
                    b.HasOne("DebtBot.DB.Entities.Bill", "Bill")
                        .WithMany("Lines")
                        .HasForeignKey("BillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Bill");
                });

            modelBuilder.Entity("DebtBot.DB.Entities.BillLineParticipant", b =>
                {
                    b.HasOne("DebtBot.DB.Entities.BillLine", "BillLine")
                        .WithMany("Participants")
                        .HasForeignKey("BillLineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DebtBot.DB.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BillLine");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DebtBot.DB.Entities.BillPayment", b =>
                {
                    b.HasOne("DebtBot.DB.Entities.Bill", "Bill")
                        .WithMany("Payments")
                        .HasForeignKey("BillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DebtBot.DB.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Bill");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DebtBot.DB.Entities.Debt", b =>
                {
                    b.HasOne("DebtBot.DB.Entities.User", "CreditorUser")
                        .WithMany("Debts")
                        .HasForeignKey("CreditorUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DebtBot.DB.Entities.User", "DebtorUser")
                        .WithMany()
                        .HasForeignKey("DebtorUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreditorUser");

                    b.Navigation("DebtorUser");
                });

            modelBuilder.Entity("DebtBot.DB.Entities.LedgerRecord", b =>
                {
                    b.HasOne("DebtBot.DB.Entities.Bill", "Bill")
                        .WithMany()
                        .HasForeignKey("BillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DebtBot.DB.Entities.User", "CreditorUser")
                        .WithMany("CreditorLedgerRecords")
                        .HasForeignKey("CreditorUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DebtBot.DB.Entities.User", "DebtorUser")
                        .WithMany("DebtorLedgerRecords")
                        .HasForeignKey("DebtorUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Bill");

                    b.Navigation("CreditorUser");

                    b.Navigation("DebtorUser");
                });

            modelBuilder.Entity("DebtBot.DB.Entities.UserContactLink", b =>
                {
                    b.HasOne("DebtBot.DB.Entities.User", "ContactUser")
                        .WithMany()
                        .HasForeignKey("ContactUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DebtBot.DB.Entities.User", "User")
                        .WithMany("UserContacts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ContactUser");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DebtBot.DB.Entities.Bill", b =>
                {
                    b.Navigation("Lines");

                    b.Navigation("Payments");
                });

            modelBuilder.Entity("DebtBot.DB.Entities.BillLine", b =>
                {
                    b.Navigation("Participants");
                });

            modelBuilder.Entity("DebtBot.DB.Entities.User", b =>
                {
                    b.Navigation("CreditorLedgerRecords");

                    b.Navigation("DebtorLedgerRecords");

                    b.Navigation("Debts");

                    b.Navigation("UserContacts");
                });
#pragma warning restore 612, 618
        }
    }
}
